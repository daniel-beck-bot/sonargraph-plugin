package com.hello2morrow.sonargraph.jenkinsplugin.controller;

import hudson.model.Action;
import hudson.model.Project;
import hudson.util.ChartUtil;

import java.io.IOException;
import java.util.Map;

import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;

import com.hello2morrow.sonargraph.jenkinsplugin.model.DiscreteLinePlot;
import com.hello2morrow.sonargraph.jenkinsplugin.model.IMetricHistoryProvider;
import com.hello2morrow.sonargraph.jenkinsplugin.persistence.CSVFileHandler;

import de.schlichtherle.truezip.file.TFile;

/**
 * This object is the responsable of managing the action that will take the user to see the graphs generated by sonargraph.
 * @author esteban
 *
 */
public class SonargraphChartAction implements Action
{
    /** Project or build that is calling this action. */
    private final Project<?, ?> project;

    /** Object that defines the post-build step associated with this action. */
    //TODO: Is that needed?
    //    private final AbstractSonargraphRecorder builder;

    /** Plot to be displayed to the user */
    private DiscreteLinePlot plot;

    /** CSV file path relative to the build workspace */
    private final String csvFilePath = "/sonargraph.csv";

    private Integer defaultGraphicWidth = 512;

    private Integer defaultGraphicHeight = 288;

    private static final String BUILD = "Build";

    private static final String TREND = "Trend";

    public SonargraphChartAction(Project<?, ?> project, AbstractSonargraphRecorder builder)
    {
        this.project = project;
    }

    /**
     * Method that generates the chart and adds it to the response object to allow jenkins to display it.
     * It is called in SonargraphChartAction/index.jelly in the src attribute of an img tag.  
     */
    public synchronized void doGetPlot(StaplerRequest req, StaplerResponse rsp)
    {
        TFile csvFile = new TFile(project.getRootDir(), csvFilePath);
        IMetricHistoryProvider csvFileHandler = new CSVFileHandler(csvFile);
        plot = new DiscreteLinePlot(csvFileHandler);
        //TODO: How to remove that warning?
        Map<String, String[]> params = req.getParameterMap();
        plot.createChart(params.get("name")[0], TREND, BUILD, params.get("yaxis")[0], Integer.parseInt(params.get("csvColumn")[0]));
        try
        {
            //TODO: Do this without deprecated methods.
            ChartUtil.generateGraph(req, rsp, plot.getChart(), defaultGraphicWidth, defaultGraphicHeight);
        }
        catch (IOException ioe)
        {
            //TODO: Handle exception
        }
    }

    /**
     * 
     * @return Project or job.
     */
    public Project<?, ?> getProject()
    {
        return project;
    }

    /**
     * Icon that will appear next to the link defined by this action.
     */
    public String getIconFileName()
    {
        return ConfigParameters.SONARGRAPH_ICON.getValue();
    }

    /**
     * Name of the link for this action
     */
    public String getDisplayName()
    {
        return ConfigParameters.ACTION_DISPLAY_NAME.getValue();
    }

    /**
     * Last segment of the url that will lead to this action.
     * e.g https://localhost:8080/jobName/sonargraph
     */
    public String getUrlName()
    {
        return ConfigParameters.ACTION_URL_NAME.getValue();
    }
}