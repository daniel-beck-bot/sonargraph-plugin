package com.hello2morrow.sonargraph.jenkinsplugin.controller;

import hudson.model.Action;
import hudson.model.ProminentProjectAction;
import hudson.model.Project;
import hudson.util.ChartUtil;

import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;

import jenkins.model.JenkinsLocationConfiguration;

import org.jfree.chart.JFreeChart;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;

import com.hello2morrow.sonargraph.jenkinsplugin.controller.util.StaplerRequestUtil;
import com.hello2morrow.sonargraph.jenkinsplugin.foundation.SonargraphLogger;
import com.hello2morrow.sonargraph.jenkinsplugin.model.AbstractPlot;
import com.hello2morrow.sonargraph.jenkinsplugin.model.AreaLinePlot;
import com.hello2morrow.sonargraph.jenkinsplugin.model.BarPlot;
import com.hello2morrow.sonargraph.jenkinsplugin.model.DiscreteLinePlot;
import com.hello2morrow.sonargraph.jenkinsplugin.model.IMetricHistoryProvider;
import com.hello2morrow.sonargraph.jenkinsplugin.model.SonargraphMetrics;
import com.hello2morrow.sonargraph.jenkinsplugin.persistence.CSVFileHandler;

import de.schlichtherle.truezip.file.TFile;

/**
 * This object is the responsable of managing the action that will take the user to see the graphs generated by sonargraph.
 * @author esteban
 *
 */
public class SonargraphChartAction implements Action, ProminentProjectAction
{
    /** Project or build that is calling this action. */
    private final Project<?, ?> project;

    private Integer defaultGraphicWidth = 350;
    private Integer defaultGraphicHeight = 250;

    private static final String BUILD = "Build";

    public SonargraphChartAction(Project<?, ?> project, AbstractSonargraphRecorder builder)
    {
        this.project = project;
    }

    /**
     * Method that generates the chart and adds it to the response object to allow jenkins to display it.
     * It is called in SonargraphChartAction/index.jelly in the src attribute of an img tag.  
     */
    public void doGetPlot(StaplerRequest req, StaplerResponse rsp)
    {
        //TODO: How to remove that warning?
        Map<String, String[]> parameterMap = req.getParameterMap();
        String metricName = StaplerRequestUtil.getSimpleValue("metric", parameterMap);

        if (metricName == null)
        {
            SonargraphLogger.INSTANCE.log(Level.SEVERE, "No metric specified for creating a plot.");
            return;
        }

        SonargraphMetrics metric = null;
        try
        {
            metric = SonargraphMetrics.fromStandardName(metricName);
        }
        catch (IllegalArgumentException ex)
        {
            SonargraphLogger.INSTANCE.log(Level.SEVERE, "Specified metric '" + metricName + "' is not supported.");
            return;
        }

        TFile csvFile = new TFile(project.getRootDir(), ConfigParameters.CSV_FILE_PATH.getValue());
        SonargraphLogger.INSTANCE.log(Level.INFO,
                "Generating chart for metric '" + metricName + "'. Reading values from '" + csvFile.getNormalizedAbsolutePath() + "'");
        IMetricHistoryProvider csvFileHandler = new CSVFileHandler(csvFile);
        AbstractPlot plot = null;

        String plotType = StaplerRequestUtil.getSimpleValue("plotType", parameterMap);
        if (plotType == null)
        {
            plot = new DiscreteLinePlot(csvFileHandler);
        }
        else
        {
            if (plotType.equals("bar"))
            {
                plot = new BarPlot(csvFileHandler);
            }
            else if (plotType.equals("area"))
            {
                plot = new AreaLinePlot(csvFileHandler);
            }
            else
            {
                plot = new DiscreteLinePlot(csvFileHandler);
            }
        }

        JFreeChart chart = plot.createChart(metric, BUILD);
        try
        {
            //TODO: Do this without deprecated methods.
            ChartUtil.generateGraph(req, rsp, chart, defaultGraphicWidth, defaultGraphicHeight);
        }
        catch (IOException ioe)
        {
            SonargraphLogger.INSTANCE.log(Level.SEVERE, "Error generating the graphic for metric '" + metric.getStandardName() + "'");
        }
    }

    /**
     * 
     * @return Project or job.
     */
    public Project<?, ?> getProject()
    {
        return project;
    }

    /**
     * Icon that will appear next to the link defined by this action.
     */
    public String getIconFileName()
    {
        return ConfigParameters.SONARGRAPH_ICON.getValue();
    }

    /**
     * Name of the link for this action
     */
    public String getDisplayName()
    {
        return ConfigParameters.ACTION_DISPLAY_NAME.getValue();
    }

    /**
     * Last segment of the url that will lead to this action.
     * e.g https://localhost:8080/jobName/sonargraph
     */
    public String getUrlName()
    {
        return ConfigParameters.ACTION_URL_NAME.getValue();
    }

    public String getReportURL()
    {
        JenkinsLocationConfiguration globalConfig = new JenkinsLocationConfiguration();
        return globalConfig.getUrl() + ConfigParameters.JOB_FOLDER.getValue() + project.getName() + "/"
                + ConfigParameters.HTML_REPORT_ACTION_URL.getValue();
    }
}